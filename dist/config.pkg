# Copyright (C) 2011-2013 G.P. Halkes
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

EXTENSIONS="cxx libtoolcxx pkgconfig verbose_compile pkgconfig_dep gettext x11 lfs"
LTSHARED=1
DEFAULT_LINGUAS=nl
SWITCHES="+x11 +gpm"
USERHELP=print_help
INSTALLDIRS="libdir docdir includedir"

print_help() {
	echo "  --without-x11           Do not include X11 integration"
	echo "  --without-gpm           Do not include GPM support"
}

test_select() {
	DESC="$1"
	shift
	clean_cxx
	for HEADER in "$@"
	do
		echo "#include <${HEADER}>"
	done > .configcxx.cc
	cat >> .configcxx.cc <<EOF
#include <stdlib.h>

int main(int argc, char *argv[]) {
	fd_set test;
	FD_ZERO(&test);
	FD_SET(0, &test);
	if (FD_ISSET(0, &test))
		FD_CLR(0, &test);
	select(1, &test, NULL, NULL, NULL);
	return 0;
}
EOF
	test_link_cxx "${DESC}"
}

checkfunction_internal() {
	clean_cxx

	FUNC="$1"
	CHECKFOR="$2"
	CODE="$3"
	shift 3
	{
		for INCLUDE
		do
			echo "#include ${INCLUDE}"
		done
		cat <<EOF
int main(int argc, char *argv[]) {
	${CODE}
	return 0;
}
EOF
	} > .configcxx.cc

	"${FUNC}" "${CHECKFOR}"
}

checkfunction() {
	checkfunction_internal test_link_cxx "$@"
}
checkfunction_compile() {
	checkfunction_internal test_compile_cxx "$@"
}

config() {
	has_support_cxx11
	if [ "$CXX11" != 1 ] ; then
		error "!! libt3widget requires a C++11 compatible compiler"
	fi
	clean_cxx
	cat > .configcxx.cc <<EOF
#include <math.h>
int main(int argc, char *argv[]) {
	floor(0.5);
	ceil(0.5);
	return 0;
}
EOF
	if test_compile_cxx "math functions" ; then
		if test_link_cxx "math functions in standard library" ; then
			:
		elif test_link_cxx "math functions in -lm" ; then
			CONFIGLIBS="$CONFIGLIBS -lm"
		else
			error "!! Can not find library for basic math functions"
		fi
	else
		error "!! Can not find basic math functions"
	fi

	clean_cxx
	cat > .configcxx.cc <<EOF
#include <transcript/transcript.h>

int main(int argc, char *argv[]) {
	transcript_get_version();
	return 0;
}
EOF
	pkgconfig libtranscript/0.2.2 LIBTRANSCRIPT test_link_cxx PKGCONFIG_REQUIRES_PRIVATE || \
		error "!! Can not find libtranscript. libtranscript is required to compile libt3widget."

	clean_cxx
	cat > .configcxx.cc <<EOF
#include <unictype.h>
#include <unicase.h>

int main(int argc, char *argv[]) {
	uint8_t buffer[10];
	size_t buffer_size = sizeof(buffer);
	size_t out_size;
	char nul = 0;

	u8_casefold(buffer, buffer_size, NULL, NULL, NULL, &out_size);
	uc_is_general_category_withtable(0x1234, UC_CATEGORY_MASK_Zs);
	uc_is_property_id_continue(0x1234);

	return 0;
}
EOF
	test_link_cxx "libunistring" "TESTLIBS=-lunistring" || \
		error "!! Can not find libunistring library. Libunistring is required to compile libt3widget."

	clean_cxx
	cat > .configcxx.cc <<EOF
#include <t3window/window.h>
#include <t3window/terminal.h>

int main(int argc, char *argv[]) {
	t3_window_get_version();
	return 0;
}
EOF
	pkgconfig libt3window/0.2.1 LIBT3WINDOW test_link_cxx PKGCONFIG_REQUIRES || \
		error "!! Can not find libt3window. libt3window is required to compile libt3widget."

	clean_cxx
	cat > .configcxx.cc <<EOF
#include <t3key/key.h>

int main(int argc, char *argv[]) {
	t3_key_get_version();
	return 0;
}
EOF
	pkgconfig libt3key/0.2.0 LIBT3KEY test_link_cxx PKGCONFIG_REQUIRES_PRIVATE || \
		error "!! Can not find libt3key. libt3key is required to compile libt3widget."

	clean_cxx
	cat > .configcxx.cc <<EOF
#include <pcre.h>

int callout(pcre_callout_block *block) { (void) block; return 0; }

int main(int argc, char *argv[]) {
	const char *err;
	int err_offset;
	pcre *pcre = pcre_compile("pattern", PCRE_UTF8 | PCRE_CASELESS, &err, &err_offset, NULL);
	pcre_callout = callout;
	return 0;
}
EOF

	pkgconfig libpcre LIBPCRE test_link_cxx PKGCONFIG_REQUIRES_PRIVATE || {
		check_message "Checking for pcre-config..."
		echo "Running: pcre-config --cflags" >> config.log
		if pcre-config --cflags >> config.log 2>&1 ; then
			check_message_result "yes"
			if test_link_cxx "libpcre compile" "TESTFLAGS=`pcre-config --cflags`" "TESTLIBS=`pcre-config --libs`" ; then
				LIBPCRE_FLAGS="`pcre-config --cflags`"
				LIBPCRE_LIBS="`pcre-config --libs`"
				PKGCONFIG_LIBS_PRIVATE="${PKGCONFIG_LIBS_PRIVATE} ${LIBPCRE_LIBS}"
				true
			fi
		else
			check_message_result "no"
			false
		fi
	} || \
	error "!! Can not find libpcre. libpcre is required to compile libt3widget."

	if test_select "select in <sys/select.h>" "sys/select.h" ; then
		CONFIGFLAGS="${CONFIGFLAGS} -DHAS_SELECT_H"
	else
		test_select "select in <unistd.h>" "sys/time.h" "sys/types.h" "unistd.h" || error "!! Can not find required select function."
	fi

	unset PTHREADFLAGS PTHREADLIBS
	clean_cxx
	cat > .configcxx.cc <<EOF
int main(int argc, char *argv[]) {
	(void) argc;
	(void) argv;
	return 0;
}
EOF
	test_link_cxx "pthread library -lpthread" TESTLIBS=-lpthread && CONFIGLIBS="$CONFIGLIBS -lpthread"

	cat > .configcxx.cc <<EOF
#include <math.h>
int main(int argc, char *argv[]) {
	ceil((double) argc);
	return 0;
}
EOF
	test_link_cxx "ceil in standard library" || {
		if test_link_cxx "ceil in -lm" TESTLIBS=-lm ; then
			CONFIGLIBS="${CONFIGLIBS} -lm"
		else
			error "!! Can not find required linker flags for ceil function. See config.log for details."
		fi
	}

	clean_cxx
	cat > .configcxx.cc <<EOF
#include <stdlib.h>
#include <stdio.h>
#include <signal.h>
#include <fnmatch.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <unistd.h>
#include <dirent.h>
int main(int argc, char *argv[]) {
	struct sigaction sa;
	struct stat statbuf;
	int fds[2];
	char buffer[100];
	DIR *dir;
	struct dirent *entry;
	struct timeval tv;
	sigemptyset(&sa.sa_mask);
	sigaddset(&sa.sa_mask, SIGWINCH);
	sigaction(SIGWINCH, &sa, NULL);
	sigprocmask(SIG_UNBLOCK, &sa.sa_mask, NULL);
	fnmatch("a", "b", 0);
	stat("file", &statbuf);
	pipe(fds);
	close(fds[0]);
	read(fds[0], buffer, sizeof(buffer));
	write(fds[0], buffer, sizeof(buffer));
	snprintf(buffer, sizeof(buffer), "foo");
	kill(0, SIGWINCH);
	getpid();
	dir = opendir("foo");
	entry = readdir(dir);
	closedir(dir);
	getcwd(buffer, sizeof(buffer));
	gettimeofday(&tv, NULL);
	return 0;
}
EOF
	test_link_cxx "other required common Un*x functions" || {
		check_message_result "Testing required functions seperatly for debugging purposes"

		checkfunction "sigemptyset" "struct sigaction sa; sigemptyset(&sa.sa_mask);" "<signal.h>"
		checkfunction "sigaddset" "struct sigaction sa; sigaddset(&sa.sa_mask, SIGWINCH);" "<signal.h>"
		checkfunction "sigaction" "struct sigaction sa; sigaction(SIGWINCH, &sa, NULL);" "<stdlib.h>" "<signal.h>"
		checkfunction "sigprocmask" "struct sigaction sa; sigprocmask(SIG_UNBLOCK, &sa.sa_mask, NULL);" "<stdlib.h>" "<signal.h>"
		checkfunction "fnmatch" 'fnmatch("a", "b", 0);' "<fnmatch.h>"
		checkfunction "stat" 'struct stat statbuf; stat("file", &statbuf);' "<sys/types.h>" "<sys/stat.h>" "<unistd.h>"
		checkfunction "pipe" 'int fds[2]; pipe(fds);' "<unistd.h>"
		checkfunction "close" 'int fd; close(fd);'  "<unistd.h>"
		checkfunction "read" 'char buffer[100]; int fd; read(fd, buffer, sizeof(buffer));' "<unistd.h>"
		checkfunction "write" 'char buffer[100]; int fd; read(fd, buffer, sizeof(buffer));' "<unistd.h>"
		checkfunction "snprintf" 'char buffer[100]; snprintf(buffer, sizeof(buffer), "foo");' "<stdio.h>"
		checkfunction "kill" 'kill(0, SIGWINCH);' "<sys/types.h>" "<signal.h>"
		checkfunction "getpid" 'getpid();' "<sys/types.h>" "<unistd.h>"
		checkfunction "opendir" 'DIR *dir = opendir("foo");' "<sys/types.h>" "<dirent.h>"
		checkfunction "readdir" 'DIR *dir; struct dirent *entry = readdir(dir);' "<sys/types.h>" "<dirent.h>"
		checkfunction "closedir" 'DIR *dir; closedir(dir);'  "<sys/types.h>" "<dirent.h>"
		checkfunction "getcwd" 'char buffer[100]; getcwd(buffer, sizeof(buffer));' "<unistd.h>"
		checkfunction "gettimeofday" 'struct timeval tv; gettimeofday(&tv, NULL);' "<sys/time.h>"
		error "!! A required Un*x function was not found. See config.log for details."
	}

	clean_cxx
	cat > .configcxx.cc <<EOF
#include <string.h>

int main(int argc, char *argv[]) {
	strdup(argv[0]);
	return 0;
}
EOF
	test_link_cxx "strdup" && CONFIGFLAGS="${CONFIGFLAGS} -DHAS_STRDUP"

	unset X11MODULE
	if [ yes = "${with_x11}" ] ; then
		unset HAS_DYNAMIC DL_FLAGS DL_LIBS
		clean_cxx
		cat > .configcxx.cc <<EOF
#include <dlfcn.h>

int main(int argc, char *argv[]) {
	void *handle = dlopen("name", RTLD_LOCAL);
	dlsym(handle, "func");
	dlclose(handle);
	return 0;
}
EOF
		if test_compile_cxx "dlopen/dlsym/dlclose in dlfcn.h" ; then
			if test_link_cxx "dlopen/dlsym/dlclose in standard library" ; then
				HAS_DYNAMIC=y
				DL_FLAGS=-DHAS_DLFCN
			elif test_link_cxx "dlopen/dlsym/dlclose in -ldl" TESTLIBS=-ldl ; then
				HAS_DYNAMIC=y
				DL_FLAGS=-DHAS_DLFCN
				DL_LIBS=-ldl
			fi
		fi

		if [ -z "$HAS_DYNAMIC" ] ; then
			clean_cxx
			cat > .configcxx.cc <<EOF
#include <ltdl.h>

int main(int argc, char *argv[]) {
	lt_dlhandle handle;
	handle = lt_dlopen("name");
	lt_dlsym(handle, "sym_name");
	lt_dlclose(handle);
	lt_dlinit();
	lt_dlexit();
	return 0;
}
EOF
			if test_link_cxx "libltdl" "TESTLIBS=-lltdl" ; then
				HAS_DYNAMIC=y
				DL_LIBS=-ltdl
			fi
		fi

		clean_cxx
		cat > .configcxx.cc <<EOF
#include <stdlib.h>
#include <xcb/xcb.h>

int main(int argc, char *argv[]) {
	int value;
	xcb_connection_t *c = xcb_connect(NULL, NULL);
	value = XCB_TIME_CURRENT_TIME;
	value = XCB_ATOM_WM_NAME;
	value = XCB_ATOM_STRING;
	value = XCB_ATOM_NONE;
}
EOF
		if [ -z "$HAS_DYNAMIC" ] ; then
			check_message_result "!! Could not find dlfcn functions or libltdl. libt3widget will not provide X11 clipboard integration."
		elif pkgconfig xcb X11 test_link_cxx ; then
			CONFIGFLAGS="$CONFIGFLAGS -DWITH_X11 $DL_FLAGS"
			CONFIGLIBS="$CONFIGLIBS $DL_LIBS"
			X11MODULE=src/libt3widget<LIBVERSION>-x11.la
		elif basic_x11 ; then
			CONFIGFLAGS="$CONFIGFLAGS -DWITH_X11 $DL_FLAGS"
			CONFIGLIBS="$CONFIGLIBS $DL_LIBS"
			X11_FLAGS="${X11_FLAGS} -DUSE_XLIB"
			X11MODULE=src/libt3widget<LIBVERSION>-x11.la
		else
			check_message_result "!! Could not find X11 library. libt3widget will not provide X11 clipboard integration."
		fi
	fi

	if [ yes = "${with_gpm}" ] ; then
		clean_cxx
		cat > .configcxx.cc <<EOF
#include <gpm.h>
#include <linux/keyboard.h>

int main(int argc, char *argv[]) {
	Gpm_Connect connect;
	Gpm_Event event;

	Gpm_Open(&connect, 0);
	Gpm_GetEvent(&event);
	event.modifiers = (1 << KG_SHIFT);
}
EOF
		if test_link_cxx "GPM" TESTLIBS="-lgpm" ; then
			CONFIGFLAGS="$CONFIGFLAGS -DHAS_GPM"
			CONFIGLIBS="$CONFIGLIBS -lgpm"
		else
			check_message_result "!! Could not locate GPM. libt3widget will not provide GPM support."
		fi
	fi

	cat > .configcxx.cc <<EOF
#include <string>
int main(int argc, char *argv[]) {
	std::string test;
	test.shrink_to_fit();
	return 0;
}
EOF
	if test_link_cxx "shrink_to_fit in string" CXXFLAGS="${CXXFLAGS}"; then
		CONFIGFLAGS="${CONFIGFLAGS} -DHAS_STRING_SHRINK_TO_FIT"
	fi

	PKGCONFIG_DESC="Dialog toolkit library"
	PKGCONFIG_VERSION="<VERSION>"
	PKGCONFIG_URL="http://os.ghalkes.nl/t3/libt3widget.html"
	PKGCONFIG_CFLAGS="-I\${includedir}/t3/widget"
	PKGCONFIG_LIBS="-lt3widget"
	PKGCONFIG_LIBS_PRIVATE="${PKGCONFIG_LIBS_PRIVATE} ${PTHREADLIBS} ${CONFIGLIBS} -lunistring"

	gen_pkgconfig libt3widget
	create_makefile "CONFIGFLAGS=${CONFIGFLAGS} ${LIBTRANSCRIPT_FLAGS} \
		${LIBT3KEY_FLAGS} ${LIBT3WINDOW_FLAGS} ${LIBPCRE_FLAGS} ${PTHREADFLAGS}" \
		"CONFIGLIBS=${CONFIGLIBS} ${LIBTRANSCRIPT_LIBS} -lunistring \
		${LIBT3KEY_LIBS} ${LIBT3WINDOW_LIBS} ${LIBPCRE_LIBS} ${PTHREADLIBS}" \
		"X11MODULE=${X11MODULE}" "X11_FLAGS=${X11_FLAGS}" "X11_LIBS=${X11_LIBS}"
}
